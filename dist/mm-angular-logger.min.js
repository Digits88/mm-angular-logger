/**
 * An AngularJS module that provides enhanced support for $log service.
 * @version v0.0.0 - 2014-07-23
 * @link https://github.com/martinmicunda/mm-angular-logger
 * @author Martin Micunda
 * @copyright 2014(c) Martin Micunda
 * @license MIT, https://github.com/martinmicunda/mm-angular-logger/blob/master/LICENSE
 */
!function(){"use strict";function n(){var n=!0,t=["info","warn","debug","error"];this.level={LOG:"log",INFO:"info",WARN:"warn",DEBUG:"debug",ERROR:"error"},this.disabled=function(e){t=e||t,n=!1},this.$get=["$log","LoggerUtils",function(e,r){var u=function(n){this.name=void 0!==n?n:""};return u.prototype={_log:function(u,o){if(n||-1===t.indexOf(u)){var i=r.buildTimeString(new Date),a="",s=[],g=null;switch(o.length){case 1:a=r.supplant("{0} [{1}] {2}: {3}",[i,u,this.name,o[0]]);break;case 2:s=o[1],a=r.supplant("{0} [{1}] {2}: {3}",[i,u,this.name,o[0]]);break;case 3:g=o[2],a=r.supplant("{0} [{1}] {2}: {3}",[i,u,this.name,o[0]])}g?e[u].call(null,r.supplant(a,s),g):e[u].call(null,r.supplant(a,s))}},log:function(){this._log("log",arguments)},info:function(){this._log("info",arguments)},warn:function(){this._log("warn",arguments)},debug:function(){this._log("debug",arguments)},error:function(){this._log("error",arguments)}},u.getLogger=function(n){return new u(n)},u}]}function t(){return{buildTimeString:function(n,t){function e(n,t){return"undefined"==typeof t&&(t=!1),t&&(10>n?n="00"+n:100>n&&(n="0"+n)),n.toString().length<2?"0"+n:n}return t=t||"%Y-%M-%d %h:%m:%s.%z",t.replace(/%([a-zA-Z])/g,function(t,r){switch(r){case"Y":return n.getFullYear();case"M":return e(n.getMonth()+1);case"d":return e(n.getDate());case"h":return e(n.getHours());case"m":return e(n.getMinutes());case"s":return e(n.getSeconds());case"z":return e(n.getMilliseconds(),!0);default:throw new Error("Unsupported format code: "+r)}})},supplant:function(n,t,e){return e=e||/\{([^\{\}]*)\}/g,n.replace(e,function(n,e){var r=e.split("."),u=t;try{for(var o in r)u=u[r[o]]}catch(i){u=n}return"string"==typeof u||"number"==typeof u?u:n})}}}angular.module("mm.logger",[]).provider("Logger",n).factory("LoggerUtils",t)}();
//# sourceMappingURL=data:application/json;base64,